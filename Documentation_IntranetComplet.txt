Documentation IntranetComplet

Table des Matières

1. Introduction
2. Architecture Générale
3. Prérequis
4. Installation et Configuration
   4.1 Clonage du dépôt
   4.2 Environnement virtuel et dépendances
   4.3 Fichier .env
   4.4 Migrations et superutilisateur
   4.5 Tests de connexion Nextcloud
   4.6 Lancement du serveur
5. Configuration des Services Intégrés
   5.1 Active Directory / LDAP
   5.2 API Moodle
   5.3 API Nextcloud (Capdrive)
6. Utilisation de l'Intranet
   6.1 Authentification et rôles
   6.2 Navigation et fonctionnalités
   6.3 Génération de documents (AutoDocs)
   6.4 Interface d'administration Django
7. Détails des Composants
   7.1 caplogy_project
   7.2 caplogy_app
     7.2.1 Modèles
     7.2.2 Services
     7.2.3 Formulaires et vues
     7.2.4 Templates et statiques
   7.3 App homepage
   7.4 Projet AutoDocs
8. Tests et Qualité
9. Déploiement
10. Dépannage et FAQ
11. Annexes

---

1. Introduction

IntranetComplet est un projet Django complet destiné à la gestion de l'intranet d'entreprise. Il intègre :
- Authentification via AD/LDAP et/ou fichier JSON local
- Gestion des utilisateurs et des groupes (permissions via Django)
- Intégration avec Moodle (récupération et gestion des cours, enseignants)
- Intégration avec Nextcloud (stockage et partage WebDAV/OCS)
- Génération automatisée de documents RH (attestations, contrats, etc.) via AutoDocs
- Interface moderne (responsive, thème clair/sombre)

2. Architecture Générale

[Schéma ASCII de l'architecture]

3. Prérequis

- Python ≥ 3.10 (testé avec 3.12)
- pip
- Accès réseau à Moodle, Nextcloud, AD/LDAP
- git

4. Installation et Configuration

4.1 Clonage du dépôt

    git clone https://votre-repo/intranetcomplet.git
    cd intranetcomplet

4.2 Environnement virtuel et dépendances

    python -m venv venv
    source venv/bin/activate  # sous Linux/macOS
    venv\Scripts\activate     # sous Windows
    pip install -r requirements.txt

4.3 Fichier .env

Créer un fichier moodle/.env (copier le .env.example si présent) et renseigner :

    # Django
    SECRET_KEY=...
    DEBUG=True
    ALLOWED_HOSTS=localhost,127.0.0.1,intranet.exemple.com
    ...

4.4 Migrations et superutilisateur

    python moodle/manage.py migrate
    python moodle/manage.py createsuperuser

Affecter-le ensuite manuellement au groupe admin via l'interface Django ou le shell :

    from django.contrib.auth.models import User, Group
    user = User.objects.get(username="votre_user")
    admin_group = Group.objects.get(name="admin")
    user.groups.add(admin_group)
    user.save()

4.5 Tests de connexion Nextcloud

    python test_nextcloud_simple.py

Vous devriez voir un code HTTP 207 ou 200 et la liste des dossiers.

4.6 Lancement du serveur

    nohup python moodle/manage.py runserver 0.0.0.0:8000 > server.log 2>&1 &

Accéder ensuite à http://<votre_serveur>:8000/

5. Configuration des Services Intégrés

5.1 Active Directory / LDAP

- AD_SERVER, AD_DOMAIN, AD_SEARCH_BASE dans .env
- Le service UserService.authenticate() utilise LDAP (NTLM) pour valider et récupérer les groupes AD.
- Les utilisateurs sont synchronisés dans auth.User et UserProfile.

5.2 API Moodle

Pour interagir avec Moodle, plusieurs fonctions de web service sont utilisées. Il est nécessaire d'activer ces fonctions dans l'administration Moodle (Site administration > Plugins > Web services > External services > votre service).

[Table des fonctions web services utilisées]

5.3 API Nextcloud (Capdrive)

- NextcloudAPI se connecte via WebDAV (PROPFIND) et OCS (POST JSON)
- Variables : NEXTCLOUD_WEBDAV_URL, NEXTCLOUD_SHARE_URL, NEXTCLOUD_USER, NEXTCLOUD_PASSWORD
- Fonctions clés : list_nc_dir(path), création de partages, etc.

6. Utilisation de l'Intranet

6.1 Authentification et rôles

- Deux sources : JSON local (users.json) et AD/LDAP
- Rôle admin ou user stocké dans UserProfile.role
- Vue de login : caplogy_app.views.login

6.2 Navigation et fonctionnalités

- Accueil : aperçu général, liens vers catégories et cours
- Catégories : tri et filtres
- Cours : listes de cours Moodle, filtres par enseignant/catégorie
- Ajout/Suppression d’enseignants : formulaires interactifs
- Gestion des logos : SchoolImage pour chaque catégorie

6.3 Génération de documents (AutoDocs)

- App Django intégrée (AutoDocs.myproject)
- Templates HTML préréglés (attestations, contrats, etc.)
- Formulaires pour remplir les données RH

6.4 Interface d'administration Django

- Accessible à /admin
- Modèles exposés : User, Group, SchoolImage, etc.

7. Détails des Composants

7.1 caplogy_project

- Configuration Django (settings.py), routes (urls.py), WSGI/ASGI
- Chargement de .env via python-dotenv

7.2 caplogy_app

7.2.1 Modèles
- UserProfile : extension de auth.User (champ role)
- SchoolImage : stocke un logo (ImageField) par catégorie Moodle

7.2.2 Services
- UserService : authentification LDAP, gestion JSON (users.json), import initial
- MoodleAPI : wrapper HTTP sur web services Moodle
- NextcloudAPI : wrapper WebDAV/OCS sur Nextcloud

7.2.3 Formulaires et vues
- Formulaires Django (forms.py, forms_add_category.py)
- Vues CRUD (views.py, views_add_category.py, etc.)
- Page d’accueil (views_homepage.py)

7.2.4 Templates et statiques
- Templates réutilisables (base.html)
- Pages spécifiques (login.html, home.html, category.html, etc.)
- CSS/JS pour thèmes, filtres, mise en page

7.3 App homepage
- Petite app pour la page principale
- Vue simple, template home.html, CSS dédié

7.4 Projet AutoDocs
- App Django indépendante intégrée (AutoDocs.myproject)
- Commande create_roles pour initialiser certains scripts
- Templates de documents RH dans templates/templates_docs

8. Tests et Qualité
- Script de test Nextcloud : test_nextcloud_simple.py
- À compléter : tests unitaires Django (caplogy_app/tests/)

9. Déploiement
1. Serveur d’application : Gunicorn/Uvicorn
2. Reverse proxy : Nginx (servir /static, /media)
3. SSL/TLS : certbot/LetsEncrypt
4. Sécuriser .env, désactiver DEBUG

10. Dépannage et FAQ
- LDAP : échec de liaison → vérifier AD_SEARCH_BASE, certificats
- Moodle : erreurs 404/403 → activer les web services, vérifier token
- Nextcloud : HTTP 401 → vérifier identifiants, URL DAV vs OCS

11. Annexes
- requirements.txt : lister les dépendances (Django, requests, ldap3, python-dotenv…)
- Structure des répertoires

intranetcomplet/
├─ moodle/                # Projet Django principal
│  ├─ caplogy_app/        # Application métier
│  ├─ caplogy_project/    # Config Django
│  ├─ homepage/           # App page d'accueil
│  ├─ AutoDocs/           # Générateur de documents RH
│  ├─ manage.py
│  └─ .env                # Variables d'environnement
├─ AutoDocs/              # (optionnel) duplication racine
├─ homepage/              # (optionnel) utils
├─ README.md
├─ requirements.txt
└─ test_nextcloud_simple.py

---

Fin de la documentation complète.
